/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { AccountSourceType } from "./api/graphql/account"
import { BaseSourceType } from "./api/graphql/base"
import { UserSourceType } from "./api/graphql/user"
import { NameSourceType } from "./api/graphql/name"
import { TaxonSourceType } from "./api/graphql/taxon"
import { TaxonDeterminationSourceType } from "./api/graphql/taxon-determination"
import { AccessionSourceType } from "./api/graphql/accession"
import { SpecimenSourceType } from "./api/graphql/specimen"
import { LocationSourceType } from "./api/graphql/location"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSONObject";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSONObject";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AccessionsBoolExp: { // input type
    AND?: Array<NexusGenInputs['AccessionsBoolExp'] | null> | null; // [AccessionsBoolExp]
    NOT?: NexusGenInputs['AccessionsBoolExp'] | null; // AccessionsBoolExp
    OR?: Array<NexusGenInputs['AccessionsBoolExp'] | null> | null; // [AccessionsBoolExp]
    id?: NexusGenInputs['StringComparisonInputType'] | null; // StringComparisonInputType
    number?: NexusGenInputs['StringComparisonInputType'] | null; // StringComparisonInputType
    specimens?: NexusGenInputs['SpecimensRelationBoolInput'] | null; // SpecimensRelationBoolInput
  }
  AccessionsRelationBoolInput: { // input type
    every?: NexusGenInputs['AccessionsBoolExp'] | null; // AccessionsBoolExp
    none?: NexusGenInputs['AccessionsBoolExp'] | null; // AccessionsBoolExp
    some?: NexusGenInputs['AccessionsBoolExp'] | null; // AccessionsBoolExp
  }
  IntComparisonInputType: { // input type
    equals?: number | null; // Int
    gt?: number | null; // Int
    lt?: number | null; // Int
    not?: number | null; // Int
  }
  LocationsBoolInput: { // input type
    AND?: Array<NexusGenInputs['LocationsBoolInput'] | null> | null; // [LocationsBoolInput]
    NOT?: NexusGenInputs['LocationsBoolInput'] | null; // LocationsBoolInput
    OR?: Array<NexusGenInputs['LocationsBoolInput'] | null> | null; // [LocationsBoolInput]
    id?: NexusGenInputs['StringComparisonInputType'] | null; // StringComparisonInputType
    name?: NexusGenInputs['StringComparisonInputType'] | null; // StringComparisonInputType
    specimens?: NexusGenInputs['SpecimensRelationBoolInput'] | null; // SpecimensRelationBoolInput
  }
  SpecimensBoolInput: { // input type
    AND?: Array<NexusGenInputs['SpecimensBoolInput'] | null> | null; // [SpecimensBoolInput]
    NOT?: NexusGenInputs['SpecimensBoolInput'] | null; // SpecimensBoolInput
    OR?: Array<NexusGenInputs['SpecimensBoolInput'] | null> | null; // [SpecimensBoolInput]
    accession?: NexusGenInputs['AccessionsBoolExp'] | null; // AccessionsBoolExp
    id?: NexusGenInputs['StringComparisonInputType'] | null; // StringComparisonInputType
    location?: NexusGenInputs['LocationsBoolInput'] | null; // LocationsBoolInput
    qualifier?: NexusGenInputs['StringComparisonInputType'] | null; // StringComparisonInputType
    quantity?: NexusGenInputs['IntComparisonInputType'] | null; // IntComparisonInputType
  }
  SpecimensRelationBoolInput: { // input type
    every?: NexusGenInputs['SpecimensBoolInput'] | null; // SpecimensBoolInput
    none?: NexusGenInputs['SpecimensBoolInput'] | null; // SpecimensBoolInput
    some?: NexusGenInputs['SpecimensBoolInput'] | null; // SpecimensBoolInput
  }
  StringComparisonInputType: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    not?: string | null; // String
    startsWith?: string | null; // String
  }
}

export interface NexusGenEnums {
  TaxonRank: "cultivar" | "form" | "group" | "microspecies" | "species" | "subform" | "subspecies" | "subvariety" | "variety"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: Date
  JSONObject: Json
}

export interface NexusGenObjects {
  Accession: AccessionSourceType;
  Account: AccountSourceType;
  Base: BaseSourceType;
  HierarchicalLocation: LocationSourceType;
  Location: LocationSourceType;
  Mutation: {};
  Name: NameSourceType;
  Query: {};
  Specimen: SpecimenSourceType;
  Taxon: TaxonSourceType;
  TaxonDetermination: TaxonDeterminationSourceType;
  User: UserSourceType;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Accession: { // field return type
    accessioned_on: NexusGenScalars['Date']; // Date!
    created_at: NexusGenScalars['Date']; // Date!
    data: NexusGenScalars['JSONObject']; // JSONObject!
    id: string; // String!
    index: number; // Int!
    number: string; // String!
    specimens: NexusGenRootTypes['Specimen'][] | null; // [Specimen!]
    taxon: NexusGenRootTypes['Taxon']; // Taxon!
    taxon_determinations: NexusGenRootTypes['TaxonDetermination'][] | null; // [TaxonDetermination!]
    year_index: number; // Int!
  }
  Account: { // field return type
    id: string; // String!
    name: string | null; // String
    namespace: string | null; // String
  }
  Base: { // field return type
    accession_number_format: string | null; // String
    id: string; // String!
    name: string | null; // String
    namespace: string | null; // String
    slug: string | null; // String
    specimen_number_format: string | null; // String
  }
  HierarchicalLocation: { // field return type
    id: string; // String!
    name: string; // String!
    parent_id: string | null; // String
  }
  Location: { // field return type
    id: string; // String!
    locations_hierarchy: Array<NexusGenRootTypes['HierarchicalLocation'] | null> | null; // [HierarchicalLocation]
    name: string; // String!
    parent_id: string | null; // String
    specimens: NexusGenRootTypes['Specimen'][] | null; // [Specimen!]
    specimens_count: number; // Int!
  }
  Mutation: { // field return type
    createAccession: NexusGenRootTypes['Accession']; // Accession!
  }
  Name: { // field return type
    aggregate: string | null; // String
    cultivar: string | null; // String
    family: string | null; // String
    flora_name_id: string | null; // String
    form: string | null; // String
    genus: string | null; // String
    group: string | null; // String
    id: string; // String!
    infraspecific_epithet: string | null; // String
    microspecies: string | null; // String
    name_according_to: string | null; // String
    name_authorship: string | null; // String
    name_published_in: string | null; // String
    name_published_in_year: number | null; // Int
    scientific_name: string | null; // String
    specific_epithet: string | null; // String
    subform: string | null; // String
    subgenus: string | null; // String
    subspecies: string | null; // String
    subvariety: string | null; // String
    taxon_rank: NexusGenEnums['TaxonRank'] | null; // TaxonRank
    taxon_remarks: string | null; // String
    variety: string | null; // String
  }
  Query: { // field return type
    accession: NexusGenRootTypes['Accession'] | null; // Accession
    accessions: Array<NexusGenRootTypes['Accession'] | null> | null; // [Accession]
    account: NexusGenRootTypes['Account'] | null; // Account
    base: NexusGenRootTypes['Base'] | null; // Base
    bases: Array<NexusGenRootTypes['Base'] | null> | null; // [Base]
    location: NexusGenRootTypes['Location'] | null; // Location
    locations: Array<NexusGenRootTypes['Location'] | null> | null; // [Location]
    name: NexusGenRootTypes['Name'] | null; // Name
    names: Array<NexusGenRootTypes['Name'] | null> | null; // [Name]
    specimen: NexusGenRootTypes['Specimen'] | null; // Specimen
    specimens: Array<NexusGenRootTypes['Specimen'] | null> | null; // [Specimen]
    taxa: Array<NexusGenRootTypes['Taxon'] | null> | null; // [Taxon]
    taxon: NexusGenRootTypes['Taxon'] | null; // Taxon
    taxon_determination: NexusGenRootTypes['TaxonDetermination'] | null; // TaxonDetermination
    taxon_determinations: Array<NexusGenRootTypes['TaxonDetermination'] | null> | null; // [TaxonDetermination]
    user: NexusGenRootTypes['User'] | null; // User
  }
  Specimen: { // field return type
    accession: NexusGenRootTypes['Accession']; // Accession!
    id: string; // String!
    location: NexusGenRootTypes['Location']; // Location!
    number: string; // String!
    qualifier: string; // String!
    quantity: number | null; // Int
  }
  Taxon: { // field return type
    flora_taxon_id: string | null; // String
    id: string; // String!
    name: NexusGenRootTypes['Name']; // Name!
    synonyms: NexusGenRootTypes['Name'][] | null; // [Name!]
  }
  TaxonDetermination: { // field return type
    accession: NexusGenRootTypes['Accession']; // Accession!
    determined_by: string; // String!
    determined_on: NexusGenScalars['Date']; // Date!
    id: string; // String!
    taxon: NexusGenRootTypes['Taxon']; // Taxon!
  }
  User: { // field return type
    email: string | null; // String
    first_name: string | null; // String
    id: string; // String!
    last_name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Accession: { // field return type name
    accessioned_on: 'Date'
    created_at: 'Date'
    data: 'JSONObject'
    id: 'String'
    index: 'Int'
    number: 'String'
    specimens: 'Specimen'
    taxon: 'Taxon'
    taxon_determinations: 'TaxonDetermination'
    year_index: 'Int'
  }
  Account: { // field return type name
    id: 'String'
    name: 'String'
    namespace: 'String'
  }
  Base: { // field return type name
    accession_number_format: 'String'
    id: 'String'
    name: 'String'
    namespace: 'String'
    slug: 'String'
    specimen_number_format: 'String'
  }
  HierarchicalLocation: { // field return type name
    id: 'String'
    name: 'String'
    parent_id: 'String'
  }
  Location: { // field return type name
    id: 'String'
    locations_hierarchy: 'HierarchicalLocation'
    name: 'String'
    parent_id: 'String'
    specimens: 'Specimen'
    specimens_count: 'Int'
  }
  Mutation: { // field return type name
    createAccession: 'Accession'
  }
  Name: { // field return type name
    aggregate: 'String'
    cultivar: 'String'
    family: 'String'
    flora_name_id: 'String'
    form: 'String'
    genus: 'String'
    group: 'String'
    id: 'String'
    infraspecific_epithet: 'String'
    microspecies: 'String'
    name_according_to: 'String'
    name_authorship: 'String'
    name_published_in: 'String'
    name_published_in_year: 'Int'
    scientific_name: 'String'
    specific_epithet: 'String'
    subform: 'String'
    subgenus: 'String'
    subspecies: 'String'
    subvariety: 'String'
    taxon_rank: 'TaxonRank'
    taxon_remarks: 'String'
    variety: 'String'
  }
  Query: { // field return type name
    accession: 'Accession'
    accessions: 'Accession'
    account: 'Account'
    base: 'Base'
    bases: 'Base'
    location: 'Location'
    locations: 'Location'
    name: 'Name'
    names: 'Name'
    specimen: 'Specimen'
    specimens: 'Specimen'
    taxa: 'Taxon'
    taxon: 'Taxon'
    taxon_determination: 'TaxonDetermination'
    taxon_determinations: 'TaxonDetermination'
    user: 'User'
  }
  Specimen: { // field return type name
    accession: 'Accession'
    id: 'String'
    location: 'Location'
    number: 'String'
    qualifier: 'String'
    quantity: 'Int'
  }
  Taxon: { // field return type name
    flora_taxon_id: 'String'
    id: 'String'
    name: 'Name'
    synonyms: 'Name'
  }
  TaxonDetermination: { // field return type name
    accession: 'Accession'
    determined_by: 'String'
    determined_on: 'Date'
    id: 'String'
    taxon: 'Taxon'
  }
  User: { // field return type name
    email: 'String'
    first_name: 'String'
    id: 'String'
    last_name: 'String'
  }
}

export interface NexusGenArgTypes {
  Location: {
    specimens: { // args
      includeSubLocations?: boolean | null; // Boolean
    }
    specimens_count: { // args
      includeSubLocations?: boolean | null; // Boolean
    }
  }
  Mutation: {
    createAccession: { // args
      accessioned_on?: NexusGenScalars['Date'] | null; // Date
      data?: NexusGenScalars['JSONObject'] | null; // JSONObject
      taxon_id: string; // String!
    }
  }
  Query: {
    accession: { // args
      id?: string | null; // String
      number?: string | null; // String
    }
    accessions: { // args
      where?: NexusGenInputs['AccessionsBoolExp'] | null; // AccessionsBoolExp
    }
    base: { // args
      id?: string | null; // String
      slug?: string | null; // String
    }
    location: { // args
      id?: string | null; // String
      name?: string | null; // String
    }
    locations: { // args
      where?: NexusGenInputs['LocationsBoolInput'] | null; // LocationsBoolInput
    }
    name: { // args
      id?: string | null; // String
    }
    specimen: { // args
      where?: NexusGenInputs['SpecimensBoolInput'] | null; // SpecimensBoolInput
    }
    specimens: { // args
      where?: NexusGenInputs['SpecimensBoolInput'] | null; // SpecimensBoolInput
    }
    taxon: { // args
      id?: string | null; // String
    }
    taxon_determination: { // args
      id?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}