generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accessions_lists {
  accession_id String   @db.Uuid
  list_id      String   @db.Uuid
  base_id      String   @db.Uuid
  created_at   DateTime @default(dbgenerated("now()")) @db.Timestamptz(6)

  base      bases      @relation(fields: [base_id], references: [id])
  accession accessions @relation(fields: [accession_id], references: [id])
  list      lists      @relation(fields: [list_id], references: [id])
  @@unique([accession_id, list_id], name: "accessions_lists_accession_id_list_id_idx")
  @@index([base_id], name: "accessions_lists_base_id_idx")
}

model accessions {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  number         String
  index          Int         @default(autoincrement())
  year_index     Int
  taxon_id       String      @db.Uuid
  accessioned_on DateTime    @default(now()) @db.Date
  base_id        String      @db.Uuid
  data           Json        @default("{}")
  created_at     DateTime    @default(dbgenerated("now()")) @db.Timestamptz(6)
  base           bases       @relation(fields: [base_id], references: [id])
  taxon          taxa        @relation(fields: [taxon_id], references: [id])
  specimens      specimens[]


  accessions_lists     accessions_lists[]
  taxon_determinations taxon_determinations[]
  @@unique([base_id, number], name: "accessions_number_base_id_idx")
  @@index([base_id], name: "accessions_base_id_idx")
  @@index([data], name: "accessions_data_idx")
}

model accounts {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String   @db.VarChar(255)
  namespace  String   @db.VarChar(255)
  created_at DateTime @default(dbgenerated("now()")) @db.Timestamptz(6)

  bases bases[]
  users users[]
}

model bases {
  id                      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                    String   @db.VarChar(255)
  slug                    String   @db.VarChar(64)
  namespace               String   @db.VarChar(255)
  accession_number_format String
  specimen_number_format  String
  account_id              String   @db.Uuid
  created_at              DateTime @default(dbgenerated("now()")) @db.Timestamptz(6)

  accessions accessions[]
  account    accounts     @relation(fields: [account_id], references: [id])
  names      names[]

  accessions_lists     accessions_lists[]
  locations            locations[]
  locations_tree       locations_tree[]
  lists                lists[]
  specimens            specimens[]
  specimens_lists      specimens_lists[]
  taxa                 taxa[]
  taxa_lists           taxa_lists[]
  taxa_names           taxa_names[]
  taxon_determinations taxon_determinations[]
  @@index([account_id], name: "bases_account_id_idx")
  @@index([namespace], name: "bases_namespace_idx")
}

model locations {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  parent_id  String?  @db.Uuid
  base_id    String   @db.Uuid
  created_at DateTime @default(dbgenerated("now()")) @db.Timestamptz(6)

  base                                               bases            @relation(fields: [base_id], references: [id])
  locations                                          locations?       @relation("locationsTolocations_parent_id", fields: [parent_id], references: [id])
  other_locations                                    locations[]      @relation("locationsTolocations_parent_id")
  locations_tree_locationsTolocations_tree_child_id  locations_tree[] @relation("locationsTolocations_tree_child_id")
  locations_tree_locationsTolocations_tree_parent_id locations_tree[] @relation("locationsTolocations_tree_parent_id")
  specimens                                          specimens[]

  @@index([base_id], name: "locations_base_id_idx")
  @@index([parent_id], name: "locations_parent_id_idx")
}

model locations_tree {
  id                                            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  parent_id                                     String    @db.Uuid
  child_id                                      String    @db.Uuid
  depth                                         Int
  base_id                                       String    @db.Uuid
  base                                          bases     @relation(fields: [base_id], references: [id])
  locations_locationsTolocations_tree_child_id  locations @relation("locationsTolocations_tree_child_id", fields: [child_id], references: [id])
  locations_locationsTolocations_tree_parent_id locations @relation("locationsTolocations_tree_parent_id", fields: [parent_id], references: [id])

  @@unique([parent_id, child_id], name: "locations_tree_parent_id_child_id_key")
  @@index([base_id], name: "locations_tree_base_id_idx")
  @@index([child_id], name: "locations_tree_child_id_idx")
  @@index([depth], name: "locations_tree_depth_idx")
  @@index([parent_id], name: "locations_tree_parent_id_idx")
}

model lists {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  base_id    String    @db.Uuid
  name       String
  slug       String
  created_at DateTime  @default(dbgenerated("now()")) @db.Timestamptz(6)
  type       list_type

  base             bases              @relation(fields: [base_id], references: [id])
  accessions_lists accessions_lists[]
  specimens_lists  specimens_lists[]
  taxa_lists       taxa_lists[]
  @@index([base_id], name: "lists_base_id_idx")
  @@index([slug], name: "lists_slug_idx")
}

model names {
  id                     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  scientific_name        String
  name_according_to      String?
  name_published_in      String?
  name_published_in_year Int?
  family                 String?
  genus                  String?
  subgenus               String?
  specific_epithet       String?
  infraspecific_epithet  String?
  name_authorship        String?
  taxon_remarks          String?
  taxon_rank             String
  aggregate              String?
  microspecies           String?
  subspecies             String?
  variety                String?
  subvariety             String?
  form                   String?
  subform                Int?
  group                  String?
  cultivar               String?
  base_id                String   @db.Uuid
  wfo_name_reference     String?
  flora_name_id          String?
  created_at             DateTime @default(dbgenerated("now()")) @db.Timestamptz(6)

  base          bases?       @relation(fields: [base_id], references: [id])
  taxa_names    taxa_names[]
  taxa_accepted taxa?

  @@index([base_id], name: "names_base_id_idx")
  @@index([family], name: "names_family_idx")
  @@index([genus], name: "names_genus_idx")
  @@index([scientific_name], name: "names_scientific_name_idx")
  @@index([flora_name_id], name: "names_flora_name_id_idx")
}

model specimens {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  accession_id String   @db.Uuid
  qualifier    String
  quantity     Int      @default(1)
  location_id  String?  @db.Uuid
  base_id      String   @db.Uuid
  data         Json     @default("{}")
  created_at   DateTime @default(dbgenerated("now()")) @db.Timestamptz(6)

  base      bases      @relation(fields: [base_id], references: [id])
  accession accessions @relation(fields: [accession_id], references: [id])
  location  locations? @relation(fields: [location_id], references: [id])

  specimens_lists specimens_lists[]
  @@index([accession_id], name: "specimens_accession_id_idx")
  @@index([base_id], name: "specimens_base_id_idx")
  @@index([data], name: "specimens_data_idx")
  @@index([location_id], name: "specimens_location_id_idx")
}

model specimens_lists {
  specimen_id String   @db.Uuid
  list_id     String   @db.Uuid
  base_id     String   @db.Uuid
  created_at  DateTime @default(dbgenerated("now()")) @db.Timestamptz(6)

  base     bases     @relation(fields: [base_id], references: [id])
  specimen specimens @relation(fields: [specimen_id], references: [id])
  list     lists     @relation(fields: [list_id], references: [id])
  @@unique([specimen_id, list_id], name: "specimens_lists_specimen_id_list_id_idx")
  @@index([base_id], name: "specimens_lists_base_id_idx")
}

model taxa {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  flora_taxon_id String?  @db.Uuid
  base_id        String   @db.Uuid
  data           Json     @default("{}")
  name_id        String   @db.Uuid
  created_at     DateTime @default(dbgenerated("now()")) @db.Timestamptz(6)

  base       bases        @relation(fields: [base_id], references: [id])
  name       names        @relation(fields: [name_id], references: [id])
  accessions accessions[]
  taxa_names taxa_names[]


  taxa_lists           taxa_lists[]
  taxon_determinations taxon_determinations[]
  @@index([base_id], name: "taxa_base_id_idx")
  @@index([data], name: "taxa_data_idx")
  @@index([flora_taxon_id], name: "taxa_flora_taxon_id_idx")
  @@index([name_id], name: "taxa_name_id_idx")
}

model taxa_lists {
  taxon_id   String   @db.Uuid
  list_id    String   @db.Uuid
  base_id    String   @db.Uuid
  created_at DateTime @default(dbgenerated("now()")) @db.Timestamptz(6)

  base  bases @relation(fields: [base_id], references: [id])
  taxon taxa  @relation(fields: [taxon_id], references: [id])
  list  lists @relation(fields: [list_id], references: [id])
  @@unique([taxon_id, list_id], name: "taxa_lists_taxon_id_list_id_idx")
  @@index([base_id], name: "taxa_lists_base_id_idx")
}

model taxa_names {
  taxon_id String      @db.Uuid
  name_id  String      @db.Uuid
  status   name_status
  base_id  String      @db.Uuid

  base       bases    @relation(fields: [base_id], references: [id])
  name       names    @relation(fields: [name_id], references: [id])
  taxon      taxa     @relation(fields: [taxon_id], references: [id])
  created_at DateTime @default(dbgenerated("now()")) @db.Timestamptz(6)

  @@unique([taxon_id, name_id], name: "taxa_names_key")
  @@index([base_id], name: "taxa_names_base_id_idx")
  @@index([status], name: "taxa_names_status_idx")
}

model taxon_determinations {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  determined_by String?
  determined_on DateTime @db.Date
  taxon_id      String   @db.Uuid
  accession_id  String   @db.Uuid
  base_id       String   @db.Uuid
  created_at    DateTime @default(dbgenerated("now()")) @db.Timestamptz(6)

  base      bases      @relation(fields: [base_id], references: [id])
  taxon     taxa       @relation(fields: [taxon_id], references: [id])
  accession accessions @relation(fields: [accession_id], references: [id])

  @@index([accession_id], name: "taxon_determinations_accession_id_idx")
  @@index([base_id], name: "taxon_determinations_base_id_idx")
  @@index([taxon_id], name: "taxon_determinations_taxon_id_idx")
}

model users {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name           String
  last_name            String
  email                String    @db.VarChar(255)
  hashed_password      String
  reset_password_token String?
  account_id           String    @db.Uuid
  created_at           DateTime  @default(dbgenerated("now()")) @db.Timestamptz(6)
  deleted_at           DateTime? @db.Timestamptz(6)

  account accounts @relation(fields: [account_id], references: [id])

  @@unique([email], name: "users_email_idx")
}

enum name_status {
  accepted
  synonym
  unknown
}

enum list_type {
  accessions
  taxa
  specimens
}
